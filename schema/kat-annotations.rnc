# A RelaxNG Schema for KAT annotation ontologies
# (c) 2013 Michael Kohlhase, released under the GNU Public License (GPL)

default namespace kat = "https://github.com/KWARC/KAT/" 
 
start = annotation

name.att = attribute name {text}
type.att = attribute type {text}
src.att = attribute src {xsd:anyURI}

## an annotation ontology for mathematical documents.
annotation = element annotation {name.att & concept* & documentation?}

## it can be documented (e.g. in HTML)
documentation = element documentation {richtext}

## a concept classifies a text fragment and specifies what metadata can be
## attached to it. concepts are used to generate annotation dialogs in KAT.
concept = element concept {name.att & field* &  display & rdf & documentation?}

## a field specifies an slot in the annotation dialog for a text fragment.
## there are various types of fields, which we specify next.
field = field.text | field.ref | field.select

## a text field with a default value and a regexp for validation
field.text = element field {attribute type {"text"} & field.all & katdefault? & validation?}

## a reference field, referencedType restricts the annotation of the target.
field.ref = element field {attribute type {"reference"} & field.all & referencedType*}

## a selector field, the option elements specify a list of options to select from
field.select = element field {attribute type {"select"} & field.all & option*}

## the parts that all incarnations share
field.all = name.att & value? & number? & documentation?

## the text that describes the field in the annotation interface (should be html5 inline)
value = element value {text}

## the default value of the field.
katdefault = element default {text}

## a regular expression that can be used for validating the input.
validation = element validation {text}

## the categorization of the text fragment this reference points to (i.e. the
## @name attribute of the concept it is annotated with.
referencedType = element referencedType {text}

## an option in a selection field, it is characterized by a value and its documentation
## (which can be shown to the annotator in the dialogue)
default.att = attribute default {"true"}
option = element option {default.att? & value & documentation?}

## the number elements specifies how many of this field are required:
## if atleast is not given the field is optional
## if atmost is not given there is no restriction on the number,
atl.att = attribute atleast {xsd:nonNegativeInteger}
atm.att = attribute atmost {xsd:nonNegativeInteger}
number = element number {atl.att?&atm.att?}

display = element display {template & css? & javascript?}

template = element template {richtext}
css = element css {src.att | text}
javascript = element javascript {src.att | text}

rdf = external "rdfxml.rnc"

# for richtext are are very lax, we allow anything. There is not much more we can do
# without namespaces.

richtext = text & anyelement*
anyattribute = attribute * {text}
anyelement = element * {anyattribute* & richtext}
